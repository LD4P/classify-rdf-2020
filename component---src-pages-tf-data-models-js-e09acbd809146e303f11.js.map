{"version":3,"sources":["webpack:///./src/pages/tf-data-models.js"],"names":["ResourceTemplateLabelsArticle","RDFNumpyMatixArticle","className","RDFUriHashArticle","TensorFlowPage","title","backTo","backLabel","nextTo","nextLabel"],"mappings":"4KAUMA,EAAgC,kBACpC,iCACE,sEACA,qPAQEC,EAAuB,kBAC3B,iCACE,mEACA,kMAKA,sHACA,uCACA,4DACgC,iFADhC,6SAOA,2BAAOC,UAAU,WACf,+BACE,4BACE,yCACA,wCACA,wCAGJ,+BACE,4BACE,iCACA,kCACA,4BAAI,wHAEN,4BACE,iCACA,kCACA,4BAAI,wHAEN,4BACE,iCACA,kCACA,4BAAI,wHAEN,4BACE,iCACA,kCACA,4BAAI,wHAEN,4BACE,iCACA,kCACA,4BAAI,wHAEN,4BACE,iCACA,kCACA,4BAAI,wHAEN,4BACE,iCACA,kCACA,4BAAI,wHAEN,4BACE,iCACA,kCACA,4BAAI,wHAEN,4BACE,iCACA,kCACA,4BAAI,wHAEN,4BACE,iCACA,kCACA,4BAAI,wHAEN,4BACE,iCACA,kCACA,4BAAI,wHAEN,4BACE,iCACA,kCACA,4BAAI,wHAEN,4BACE,iCACA,kCACA,4BAAI,wHAEN,4BACE,iCACA,kCACA,4BAAI,wHAEN,4BACE,iCACA,kCACA,4BAAI,wHAEN,4BACE,iCACA,kCACA,4BAAI,wHAEN,4BACE,iCACA,kCACA,4BAAI,4HAORC,EAAoB,kBACxB,iCACE,0EAkBWC,UAdQ,kBACrB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,2BACX,kBAAC,IAAD,CAAWA,MA1ID,2BA2IV,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAkBC,OAAO,oBACPC,UAAU,uBACVC,OAAO,iBACPC,UAAW","file":"component---src-pages-tf-data-models-js-e09acbd809146e303f11.js","sourcesContent":["import React from \"react\"\n\nimport PageTitle from \"../components/page-title\"\nimport PresentationTitle from \"../components/presentation-title\"\nimport FooterNavigation from \"../components/footer-nav\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst title = \"TensorFlow Data Models\"\n\nconst ResourceTemplateLabelsArticle = () => (\n  <article>\n    <h2>Resource Templates as Labels (Classes)</h2>\n    <p>\n      Taking a hybrid approach to classifying incoming RDF, we will use as\n      the resource template as a label or class for the existing RDF created in\n      the three Sinopia environments; development, staging, and production.\n    </p>\n  </article>\n)\n\nconst RDFNumpyMatixArticle = () => (\n  <article>\n    <h2>RDF Subjects-Predicates as a Matrix</h2>\n    <p>\n      The first approach we used was treating an incoming URI as a text string\n      and then map each character in a row with it's position noted by the\n      valid URL characters.\n    </p>\n    <code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~:/?#[]@!$&'()*+,;=</code>\n    <h3>Example</h3>\n    <p>\n      To calculate a matrix for the <code>http://www.w3.org/1999/02/22-rdf-syntax-ns#type</code> URI,\n      one of the most common predicates, each character in the URI is assigned a\n      position based on it's position in the valid URL list. A zero-padded\n      vector of length 84 (the number of valid URL characters above) is created\n      and the position of the character in the vector is assigned a value of 1.\n    </p>\n    <table className=\"primary\">\n      <thead>\n        <tr>\n          <th>Character</th>\n          <th>Position</th>\n          <th>Vector</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>h</td>\n          <td>33</td>\n          <td><code>000000000000000000000000000000000100000000000000000000000000000000000000000000000000</code></td>\n        </tr>\n        <tr>\n          <td>t</td>\n          <td>45</td>\n          <td><code>000000000000000000000000000000000000000000000100000000000000000000000000000000000000</code></td>\n        </tr>\n        <tr>\n          <td>t</td>\n          <td>45</td>\n          <td><code>000000000000000000000000000000000000000000000100000000000000000000000000000000000000</code></td>\n        </tr>\n        <tr>\n          <td>p</td>\n          <td>41</td>\n          <td><code>000000000000000000000000000000000000000001000000000000000000000000000000000000000000</code></td>\n        </tr>\n        <tr>\n          <td>:</td>\n          <td>66</td>\n          <td><code>000000000000000000000000000000000000000000000000000000000000000000100000000000000000</code></td>\n        </tr>\n        <tr>\n          <td>/</td>\n          <td>67</td>\n          <td><code>000000000000000000000000000000000000000000000000000000000000000000010000000000000000</code></td>\n        </tr>\n        <tr>\n          <td>/</td>\n          <td>67</td>\n          <td><code>000000000000000000000000000000000000000000000000000000000000000000010000000000000000</code></td>\n        </tr>\n        <tr>\n          <td>w</td>\n          <td>48</td>\n          <td><code>000000000000000000000000000000000000000000000000100000000000000000000000000000000000</code></td>\n        </tr>\n        <tr>\n          <td>w</td>\n          <td>48</td>\n          <td><code>000000000000000000000000000000000000000000000000100000000000000000000000000000000000</code></td>\n        </tr>\n        <tr>\n          <td>w</td>\n          <td>48</td>\n          <td><code>000000000000000000000000000000000000000000000000100000000000000000000000000000000000</code></td>\n        </tr>\n        <tr>\n          <td>.</td>\n          <td>63</td>\n          <td><code>000000000000000000000000000000000000000000000000000000000000000100000000000000000000</code></td>\n        </tr>\n        <tr>\n          <td>w</td>\n          <td>48</td>\n          <td><code>000000000000000000000000000000000000000000000000100000000000000000000000000000000000</code></td>\n        </tr>\n        <tr>\n          <td>3</td>\n          <td>55</td>\n          <td><code>000000000000000000000000000000000000000000000000000000010000000000000000000000000000</code></td>\n        </tr>\n        <tr>\n          <td>.</td>\n          <td>63</td>\n          <td><code>000000000000000000000000000000000000000000000000000000000000000100000000000000000000</code></td>\n        </tr>\n        <tr>\n          <td>o</td>\n          <td>40</td>\n          <td><code>000000000000000000000000000000000000000010000000000000000000000000000000000000000000</code></td>\n        </tr>\n        <tr>\n          <td>r</td>\n          <td>43</td>\n          <td><code>000000000000000000000000000000000000000000010000000000000000000000000000000000000000</code></td>\n        </tr>\n        <tr>\n          <td>g</td>\n          <td>32</td>\n          <td><code>000000000000000000000000000000001000000000000000000000000000000000000000000000000000</code></td>\n        </tr>\n      </tbody>\n    </table>\n  </article>\n)\n\nconst RDFUriHashArticle = () => (\n  <article>\n    <h2>RDF Subjects-Predicates as a Hash Matrix</h2>\n  </article>\n)\n\nconst TensorFlowPage = () => (\n  <Layout>\n    <SEO title=\"TensorFlow Data Models\" />\n    <PageTitle title={title} />\n    <ResourceTemplateLabelsArticle />\n    <RDFNumpyMatixArticle />\n    <RDFUriHashArticle />\n    <FooterNavigation backTo='sinopia-challenge'\n                      backLabel='Sinopia UI Challenge'\n                      nextTo='model-training'\n                      nextLabel= 'Training RDF Classification models' />\n  </Layout>\n)\n\nexport default TensorFlowPage\n"],"sourceRoot":""}